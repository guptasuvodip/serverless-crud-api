Overview
This project provides a simple CRUD (Create, Read, Update, Delete) API for managing tasks. The API is built using AWS serverless technologies and supports basic task management operations.
Architecture
Client (Postman/Browser) 
    ↓
API Gateway (REST API with Lambda Proxy Integration)
    ↓
AWS Lambda (Python 3.x)
    ↓
DynamoDB (tasks table)
Features

✅ Create new tasks
✅ Read all tasks
✅ Update existing tasks
✅ Delete tasks
✅ Serverless architecture (no servers to manage)
✅ Auto-scaling with AWS Lambda
✅ Low latency with DynamoDB

Prerequisites

AWS Account
Python 3.x
AWS CLI configured (optional, for deployment)
Postman or any API testing tool

AWS Resources Required

1.DynamoDB Table

Table Name: tasks
Primary Key: id (String)


2.Lambda Function

Runtime: Python 3.x
IAM Role with DynamoDB permissions


3.API Gateway

REST API with Lambda Proxy Integration enabled



DynamoDB Table Structure
json{
  "id": "string",         // Auto-generated UUID (from Lambda context)
  "name": "string",       // Task name/description
  "completed": "boolean"  // Task completion status
}
API Endpoints
1. Get All Tasks
Request:
httpGET /tasks
Response:
json[
  {
    "id": "abc-123",
    "name": "Buy groceries",
    "completed": false
  },
  {
    "id": "def-456",
    "name": "Finish project",
    "completed": true
  }
]
2. Create Task
Request:
httpPOST /tasks
Content-Type: application/json

{
  "name": "Buy groceries",
  "completed": false
}
Response:
json{
  "message": "Task created successfully"
}
3. Update Task
Request:
httpPATCH /tasks
Content-Type: application/json

{
  "id": "abc-123",
  "name": "Buy groceries and cook dinner",
  "completed": true
}
Response:
json{
  "message": "Task updated successfully",
  "task": {
    "id": "abc-123",
    "name": "Buy groceries and cook dinner",
    "completed": true
  }
}
4. Delete Task
Request:
httpDELETE /tasks
Content-Type: application/json

{
  "id": "abc-123"
}
Response:
json{
  "message": "Task deleted successfully",
  "task": {
    "id": "abc-123",
    "name": "Buy groceries",
    "completed": false
  }
}
Setup Instructions
1. Create DynamoDB Table
#bashaws dynamodb create-table \
#   --table-name tasks \
#   --attribute-definitions AttributeName=id,AttributeType=S \
#    --key-schema AttributeName=id,KeyType=HASH \
#    --billing-mode PAY_PER_REQUEST
2. Create IAM Role for Lambda
Create a role with the following policies:

AWSLambdaBasicExecutionRole (for CloudWatch logs)
Custom policy for DynamoDB access:

json{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "dynamodb:PutItem",
        "dynamodb:GetItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:Scan"
      ],
      "Resource": "arn:aws:dynamodb:REGION:ACCOUNT_ID:table/tasks"
    }
  ]
}
3. Deploy Lambda Function

Go to AWS Lambda Console
Create a new function
Choose Python 3.x runtime
Copy the code from lambda_function.py
Assign the IAM role created in step 2

4. Configure API Gateway

Create a new REST API
Create a resource (e.g., /tasks)
Create methods: GET, POST, PATCH, DELETE
For each method:

Integration type: Lambda Function
Enable Lambda Proxy Integration ✓
Select your Lambda function


Deploy API to a stage (e.g., prod)

5. Test the API
Use the API Gateway endpoint URL:
https://{api-id}.execute-api.{region}.amazonaws.com/{stage}/tasks
Testing with Postman

Import the API endpoints into Postman
Set the base URL to your API Gateway endpoint
Test each operation:

GET to retrieve all tasks
POST to create new tasks
PATCH to update tasks
DELETE to remove tasks


Verify changes in DynamoDB console

Lambda Function Code
The main Lambda handler routes requests based on HTTP method:
pythondef lambda_handler(event, context):
    http_method = event.get('httpMethod')
    
    if http_method == 'GET':
        return handle_get()
    elif http_method == 'POST':
        return handle_post(event, context)
    elif http_method == 'PATCH':
        return handle_patch(event)
    elif http_method == 'DELETE':
        return handle_delete(event)
